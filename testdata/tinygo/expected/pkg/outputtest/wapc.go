// Code generated by @apexlang/codegen. DO NOT EDIT.

package outputtest

import (
	"context"

	"github.com/google/uuid"
	"github.com/wapc/tinygo-msgpack"
	"github.com/wapc/tinygo-msgpack/convert"
	"github.com/wapc/wapc-guest-tinygo"
)

var _ = convert.Package

type RepositoryImpl struct {
	binding string
}

func NewRepository(binding ...string) *RepositoryImpl {
	var bindingName string
	if len(binding) > 0 {
		bindingName = binding[0]
	}
	return &RepositoryImpl{
		binding: bindingName,
	}
}

func (h *RepositoryImpl) GetData(ctx context.Context) (*MyType, error) {
	payload, err := wapc.HostCall(h.binding, "apex.testing.Repository", "getData", []byte{})
	if err != nil {
		return nil, err
	}
	decoder := msgpack.NewDecoder(payload)
	return msgpack.DecodeNillable[MyType](&decoder)
}

func RegisterMyService(svc MyService) {
	wapc.RegisterFunction("apex.testing.MyService/emptyVoid", myServiceEmptyVoidWrapper(svc))
	wapc.RegisterFunction("apex.testing.MyService/unaryType", myServiceUnaryTypeWrapper(svc))
	wapc.RegisterFunction("apex.testing.MyService/unaryEnum", myServiceUnaryEnumWrapper(svc))
	wapc.RegisterFunction("apex.testing.MyService/unaryAlias", myServiceUnaryAliasWrapper(svc))
	wapc.RegisterFunction("apex.testing.MyService/unaryString", myServiceUnaryStringWrapper(svc))
	wapc.RegisterFunction("apex.testing.MyService/unaryI64", myServiceUnaryI64Wrapper(svc))
	wapc.RegisterFunction("apex.testing.MyService/unaryI32", myServiceUnaryI32Wrapper(svc))
	wapc.RegisterFunction("apex.testing.MyService/unaryI16", myServiceUnaryI16Wrapper(svc))
	wapc.RegisterFunction("apex.testing.MyService/unaryI8", myServiceUnaryI8Wrapper(svc))
	wapc.RegisterFunction("apex.testing.MyService/unaryU64", myServiceUnaryU64Wrapper(svc))
	wapc.RegisterFunction("apex.testing.MyService/unaryU32", myServiceUnaryU32Wrapper(svc))
	wapc.RegisterFunction("apex.testing.MyService/unaryU16", myServiceUnaryU16Wrapper(svc))
	wapc.RegisterFunction("apex.testing.MyService/unaryU8", myServiceUnaryU8Wrapper(svc))
	wapc.RegisterFunction("apex.testing.MyService/unaryF64", myServiceUnaryF64Wrapper(svc))
	wapc.RegisterFunction("apex.testing.MyService/unaryF32", myServiceUnaryF32Wrapper(svc))
	wapc.RegisterFunction("apex.testing.MyService/unaryBytes", myServiceUnaryBytesWrapper(svc))
	wapc.RegisterFunction("apex.testing.MyService/funcType", myServiceFuncTypeWrapper(svc))
	wapc.RegisterFunction("apex.testing.MyService/funcEnum", myServiceFuncEnumWrapper(svc))
	wapc.RegisterFunction("apex.testing.MyService/funcAlias", myServiceFuncAliasWrapper(svc))
	wapc.RegisterFunction("apex.testing.MyService/funcString", myServiceFuncStringWrapper(svc))
	wapc.RegisterFunction("apex.testing.MyService/funcI64", myServiceFuncI64Wrapper(svc))
	wapc.RegisterFunction("apex.testing.MyService/funcI32", myServiceFuncI32Wrapper(svc))
	wapc.RegisterFunction("apex.testing.MyService/funcI16", myServiceFuncI16Wrapper(svc))
	wapc.RegisterFunction("apex.testing.MyService/funcI8", myServiceFuncI8Wrapper(svc))
	wapc.RegisterFunction("apex.testing.MyService/funcU64", myServiceFuncU64Wrapper(svc))
	wapc.RegisterFunction("apex.testing.MyService/funcU32", myServiceFuncU32Wrapper(svc))
	wapc.RegisterFunction("apex.testing.MyService/funcU16", myServiceFuncU16Wrapper(svc))
	wapc.RegisterFunction("apex.testing.MyService/funcU8", myServiceFuncU8Wrapper(svc))
	wapc.RegisterFunction("apex.testing.MyService/funcF64", myServiceFuncF64Wrapper(svc))
	wapc.RegisterFunction("apex.testing.MyService/funcF32", myServiceFuncF32Wrapper(svc))
	wapc.RegisterFunction("apex.testing.MyService/funcBytes", myServiceFuncBytesWrapper(svc))
}

func myServiceEmptyVoidWrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		err := svc.EmptyVoid(ctx)
		if err != nil {
			return nil, err
		}
		return []byte{}, nil
	}
}

func myServiceUnaryTypeWrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		var request MyType
		if err := request.Decode(&decoder); err != nil {
			return nil, err
		}
		response, err := svc.UnaryType(ctx, &request)
		if err != nil {
			return nil, err
		}
		return msgpack.ToBytes(response)
	}
}

func myServiceUnaryEnumWrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		enumVal, err := decoder.ReadInt32()
		if err != nil {
			return nil, err
		}
		request := MyEnum(enumVal)
		response, err := svc.UnaryEnum(ctx, request)
		if err != nil {
			return nil, err
		}
		var sizer msgpack.Sizer
		sizer.WriteInt32(int32(response))
		ua := make([]byte, sizer.Len())
		encoder := msgpack.NewEncoder(ua)
		encoder.WriteInt32(int32(response))
		return ua, nil
	}
}

func myServiceUnaryAliasWrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		request, err := convert.Parse(uuid.Parse)(decoder.ReadString())
		if err != nil {
			return nil, err
		}
		response, err := svc.UnaryAlias(ctx, request)
		if err != nil {
			return nil, err
		}
		var sizer msgpack.Sizer
		sizer.WriteString(response.String())
		ua := make([]byte, sizer.Len())
		encoder := msgpack.NewEncoder(ua)
		encoder.WriteString(response.String())
		return ua, nil
	}
}

func myServiceUnaryStringWrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		request, err := decoder.ReadString()
		if err != nil {
			return nil, err
		}
		response, err := svc.UnaryString(ctx, request)
		if err != nil {
			return nil, err
		}
		var sizer msgpack.Sizer
		sizer.WriteString(response)
		ua := make([]byte, sizer.Len())
		encoder := msgpack.NewEncoder(ua)
		encoder.WriteString(response)
		return ua, nil
	}
}

func myServiceUnaryI64Wrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		request, err := decoder.ReadInt64()
		if err != nil {
			return nil, err
		}
		response, err := svc.UnaryI64(ctx, request)
		if err != nil {
			return nil, err
		}
		var sizer msgpack.Sizer
		sizer.WriteInt64(response)
		ua := make([]byte, sizer.Len())
		encoder := msgpack.NewEncoder(ua)
		encoder.WriteInt64(response)
		return ua, nil
	}
}

func myServiceUnaryI32Wrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		request, err := decoder.ReadInt32()
		if err != nil {
			return nil, err
		}
		response, err := svc.UnaryI32(ctx, request)
		if err != nil {
			return nil, err
		}
		var sizer msgpack.Sizer
		sizer.WriteInt32(response)
		ua := make([]byte, sizer.Len())
		encoder := msgpack.NewEncoder(ua)
		encoder.WriteInt32(response)
		return ua, nil
	}
}

func myServiceUnaryI16Wrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		request, err := decoder.ReadInt16()
		if err != nil {
			return nil, err
		}
		response, err := svc.UnaryI16(ctx, request)
		if err != nil {
			return nil, err
		}
		var sizer msgpack.Sizer
		sizer.WriteInt16(response)
		ua := make([]byte, sizer.Len())
		encoder := msgpack.NewEncoder(ua)
		encoder.WriteInt16(response)
		return ua, nil
	}
}

func myServiceUnaryI8Wrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		request, err := decoder.ReadInt8()
		if err != nil {
			return nil, err
		}
		response, err := svc.UnaryI8(ctx, request)
		if err != nil {
			return nil, err
		}
		var sizer msgpack.Sizer
		sizer.WriteInt8(response)
		ua := make([]byte, sizer.Len())
		encoder := msgpack.NewEncoder(ua)
		encoder.WriteInt8(response)
		return ua, nil
	}
}

func myServiceUnaryU64Wrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		request, err := decoder.ReadUint64()
		if err != nil {
			return nil, err
		}
		response, err := svc.UnaryU64(ctx, request)
		if err != nil {
			return nil, err
		}
		var sizer msgpack.Sizer
		sizer.WriteUint64(response)
		ua := make([]byte, sizer.Len())
		encoder := msgpack.NewEncoder(ua)
		encoder.WriteUint64(response)
		return ua, nil
	}
}

func myServiceUnaryU32Wrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		request, err := decoder.ReadUint32()
		if err != nil {
			return nil, err
		}
		response, err := svc.UnaryU32(ctx, request)
		if err != nil {
			return nil, err
		}
		var sizer msgpack.Sizer
		sizer.WriteUint32(response)
		ua := make([]byte, sizer.Len())
		encoder := msgpack.NewEncoder(ua)
		encoder.WriteUint32(response)
		return ua, nil
	}
}

func myServiceUnaryU16Wrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		request, err := decoder.ReadUint16()
		if err != nil {
			return nil, err
		}
		response, err := svc.UnaryU16(ctx, request)
		if err != nil {
			return nil, err
		}
		var sizer msgpack.Sizer
		sizer.WriteUint16(response)
		ua := make([]byte, sizer.Len())
		encoder := msgpack.NewEncoder(ua)
		encoder.WriteUint16(response)
		return ua, nil
	}
}

func myServiceUnaryU8Wrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		request, err := decoder.ReadUint8()
		if err != nil {
			return nil, err
		}
		response, err := svc.UnaryU8(ctx, request)
		if err != nil {
			return nil, err
		}
		var sizer msgpack.Sizer
		sizer.WriteUint8(response)
		ua := make([]byte, sizer.Len())
		encoder := msgpack.NewEncoder(ua)
		encoder.WriteUint8(response)
		return ua, nil
	}
}

func myServiceUnaryF64Wrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		request, err := decoder.ReadFloat64()
		if err != nil {
			return nil, err
		}
		response, err := svc.UnaryF64(ctx, request)
		if err != nil {
			return nil, err
		}
		var sizer msgpack.Sizer
		sizer.WriteFloat64(response)
		ua := make([]byte, sizer.Len())
		encoder := msgpack.NewEncoder(ua)
		encoder.WriteFloat64(response)
		return ua, nil
	}
}

func myServiceUnaryF32Wrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		request, err := decoder.ReadFloat32()
		if err != nil {
			return nil, err
		}
		response, err := svc.UnaryF32(ctx, request)
		if err != nil {
			return nil, err
		}
		var sizer msgpack.Sizer
		sizer.WriteFloat32(response)
		ua := make([]byte, sizer.Len())
		encoder := msgpack.NewEncoder(ua)
		encoder.WriteFloat32(response)
		return ua, nil
	}
}

func myServiceUnaryBytesWrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		request, err := decoder.ReadByteArray()
		if err != nil {
			return nil, err
		}
		response, err := svc.UnaryBytes(ctx, request)
		if err != nil {
			return nil, err
		}
		var sizer msgpack.Sizer
		sizer.WriteByteArray(response)
		ua := make([]byte, sizer.Len())
		encoder := msgpack.NewEncoder(ua)
		encoder.WriteByteArray(response)
		return ua, nil
	}
}

func myServiceFuncTypeWrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		var inputArgs MyServiceFuncTypeArgs
		inputArgs.Decode(&decoder)
		response, err := svc.FuncType(ctx, &inputArgs.Value, inputArgs.Optional)
		if err != nil {
			return nil, err
		}
		return msgpack.ToBytes(response)
	}
}

func myServiceFuncEnumWrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		var inputArgs MyServiceFuncEnumArgs
		inputArgs.Decode(&decoder)
		response, err := svc.FuncEnum(ctx, inputArgs.Value, inputArgs.Optional)
		if err != nil {
			return nil, err
		}
		var sizer msgpack.Sizer
		sizer.WriteInt32(int32(response))
		ua := make([]byte, sizer.Len())
		encoder := msgpack.NewEncoder(ua)
		encoder.WriteInt32(int32(response))
		return ua, nil
	}
}

func myServiceFuncAliasWrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		var inputArgs MyServiceFuncAliasArgs
		inputArgs.Decode(&decoder)
		response, err := svc.FuncAlias(ctx, inputArgs.Value, inputArgs.Optional)
		if err != nil {
			return nil, err
		}
		var sizer msgpack.Sizer
		sizer.WriteString(response.String())
		ua := make([]byte, sizer.Len())
		encoder := msgpack.NewEncoder(ua)
		encoder.WriteString(response.String())
		return ua, nil
	}
}

func myServiceFuncStringWrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		var inputArgs MyServiceFuncStringArgs
		inputArgs.Decode(&decoder)
		response, err := svc.FuncString(ctx, inputArgs.Value, inputArgs.Optional)
		if err != nil {
			return nil, err
		}
		var sizer msgpack.Sizer
		sizer.WriteString(response)
		ua := make([]byte, sizer.Len())
		encoder := msgpack.NewEncoder(ua)
		encoder.WriteString(response)
		return ua, nil
	}
}

func myServiceFuncI64Wrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		var inputArgs MyServiceFuncI64Args
		inputArgs.Decode(&decoder)
		response, err := svc.FuncI64(ctx, inputArgs.Value, inputArgs.Optional)
		if err != nil {
			return nil, err
		}
		var sizer msgpack.Sizer
		sizer.WriteInt64(response)
		ua := make([]byte, sizer.Len())
		encoder := msgpack.NewEncoder(ua)
		encoder.WriteInt64(response)
		return ua, nil
	}
}

func myServiceFuncI32Wrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		var inputArgs MyServiceFuncI32Args
		inputArgs.Decode(&decoder)
		response, err := svc.FuncI32(ctx, inputArgs.Value, inputArgs.Optional)
		if err != nil {
			return nil, err
		}
		var sizer msgpack.Sizer
		sizer.WriteInt32(response)
		ua := make([]byte, sizer.Len())
		encoder := msgpack.NewEncoder(ua)
		encoder.WriteInt32(response)
		return ua, nil
	}
}

func myServiceFuncI16Wrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		var inputArgs MyServiceFuncI16Args
		inputArgs.Decode(&decoder)
		response, err := svc.FuncI16(ctx, inputArgs.Value, inputArgs.Optional)
		if err != nil {
			return nil, err
		}
		var sizer msgpack.Sizer
		sizer.WriteInt16(response)
		ua := make([]byte, sizer.Len())
		encoder := msgpack.NewEncoder(ua)
		encoder.WriteInt16(response)
		return ua, nil
	}
}

func myServiceFuncI8Wrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		var inputArgs MyServiceFuncI8Args
		inputArgs.Decode(&decoder)
		response, err := svc.FuncI8(ctx, inputArgs.Value, inputArgs.Optional)
		if err != nil {
			return nil, err
		}
		var sizer msgpack.Sizer
		sizer.WriteInt8(response)
		ua := make([]byte, sizer.Len())
		encoder := msgpack.NewEncoder(ua)
		encoder.WriteInt8(response)
		return ua, nil
	}
}

func myServiceFuncU64Wrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		var inputArgs MyServiceFuncU64Args
		inputArgs.Decode(&decoder)
		response, err := svc.FuncU64(ctx, inputArgs.Value, inputArgs.Optional)
		if err != nil {
			return nil, err
		}
		var sizer msgpack.Sizer
		sizer.WriteUint64(response)
		ua := make([]byte, sizer.Len())
		encoder := msgpack.NewEncoder(ua)
		encoder.WriteUint64(response)
		return ua, nil
	}
}

func myServiceFuncU32Wrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		var inputArgs MyServiceFuncU32Args
		inputArgs.Decode(&decoder)
		response, err := svc.FuncU32(ctx, inputArgs.Value, inputArgs.Optional)
		if err != nil {
			return nil, err
		}
		var sizer msgpack.Sizer
		sizer.WriteUint32(response)
		ua := make([]byte, sizer.Len())
		encoder := msgpack.NewEncoder(ua)
		encoder.WriteUint32(response)
		return ua, nil
	}
}

func myServiceFuncU16Wrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		var inputArgs MyServiceFuncU16Args
		inputArgs.Decode(&decoder)
		response, err := svc.FuncU16(ctx, inputArgs.Value, inputArgs.Optional)
		if err != nil {
			return nil, err
		}
		var sizer msgpack.Sizer
		sizer.WriteUint16(response)
		ua := make([]byte, sizer.Len())
		encoder := msgpack.NewEncoder(ua)
		encoder.WriteUint16(response)
		return ua, nil
	}
}

func myServiceFuncU8Wrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		var inputArgs MyServiceFuncU8Args
		inputArgs.Decode(&decoder)
		response, err := svc.FuncU8(ctx, inputArgs.Value, inputArgs.Optional)
		if err != nil {
			return nil, err
		}
		var sizer msgpack.Sizer
		sizer.WriteUint8(response)
		ua := make([]byte, sizer.Len())
		encoder := msgpack.NewEncoder(ua)
		encoder.WriteUint8(response)
		return ua, nil
	}
}

func myServiceFuncF64Wrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		var inputArgs MyServiceFuncF64Args
		inputArgs.Decode(&decoder)
		response, err := svc.FuncF64(ctx, inputArgs.Value, inputArgs.Optional)
		if err != nil {
			return nil, err
		}
		var sizer msgpack.Sizer
		sizer.WriteFloat64(response)
		ua := make([]byte, sizer.Len())
		encoder := msgpack.NewEncoder(ua)
		encoder.WriteFloat64(response)
		return ua, nil
	}
}

func myServiceFuncF32Wrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		var inputArgs MyServiceFuncF32Args
		inputArgs.Decode(&decoder)
		response, err := svc.FuncF32(ctx, inputArgs.Value, inputArgs.Optional)
		if err != nil {
			return nil, err
		}
		var sizer msgpack.Sizer
		sizer.WriteFloat32(response)
		ua := make([]byte, sizer.Len())
		encoder := msgpack.NewEncoder(ua)
		encoder.WriteFloat32(response)
		return ua, nil
	}
}

func myServiceFuncBytesWrapper(svc MyService) wapc.Function {
	return func(payload []byte) ([]byte, error) {
		ctx := context.Background()
		decoder := msgpack.NewDecoder(payload)
		var inputArgs MyServiceFuncBytesArgs
		inputArgs.Decode(&decoder)
		response, err := svc.FuncBytes(ctx, inputArgs.Value, inputArgs.Optional)
		if err != nil {
			return nil, err
		}
		var sizer msgpack.Sizer
		sizer.WriteByteArray(response)
		ua := make([]byte, sizer.Len())
		encoder := msgpack.NewEncoder(ua)
		encoder.WriteByteArray(response)
		return ua, nil
	}
}
